@inherits BaseComponent

<Space Class="kui-nav" Size="@("0")">
    <SpaceItem>
        <Tooltip Title="@Language["Nav.HomePage"]">
            <a href="/"><Icon Type="home" /></a>
        </Tooltip>
    </SpaceItem>
    <SpaceItem Class="kui-nav-full">
        <Tooltip Title="@FullScreenTitle"><Icon Type="@FullScreenIcon" OnClick="OnFullScreenAsync" /></Tooltip>
    </SpaceItem>
    @if (Config.App.IsSize)
    {
        <SpaceItem><KSysSize /></SpaceItem>
    }
    @if (Config.App.IsLanguage)
    {
        <SpaceItem Style="width:40px;text-align:center;"><KLanguage /></SpaceItem>
    }
    <SpaceItem>
        <AntDropdown Context="Context" Model="userDrop">
            <Avatar Src="@CurrentUser?.AvatarUrl" />
            <span>@CurrentUser?.Name</span>
        </AntDropdown>
    </SpaceItem>
    @if (Config.App.IsTheme)
    {
        <SpaceItem><AntTheme /></SpaceItem>
    }
    <SpaceItem Class="kui-nav-setting">
        <Tooltip Title="@Language["Nav.Setting"]"><Icon Type="setting" OnClick="@(e=>OnMenuClick?.Invoke("setting"))" /></Tooltip>
    </SpaceItem>
</Space>

@code {
    private bool isFullScreen = false;
    private string FullScreenTitle => isFullScreen ? Language["Nav.ExitScreen"] : Language["Nav.FullScreen"];
    private string FullScreenIcon => isFullScreen ? "fullscreen-exit" : "fullscreen";
    private DropdownModel userDrop = new();

    [Parameter] public Action<string> OnMenuClick { get; set; }

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();
        userDrop.Items = new List<ActionInfo>();
        if (!Config.App.IsClient)
        {
            userDrop.Items.Add(new ActionInfo { Id = "profile", Name = Language["Nav.Profile"], Icon = "user", Url = "/profile" });
            if (CurrentUser.IsSystemAdmin() && Config.IsDevelopment)
                userDrop.Items.Add(new ActionInfo { Id = "SysDevelopment", Name = Language["Nav.Development"], Icon = "appstore-add", Url = "/development" });
        }
        userDrop.Items.Add(new ActionInfo { Id = "logout", Name = Language["Nav.Exit"], Icon = "poweroff" });
        userDrop.OnItemClick = OnItemClickAsync;
    }

    private Task OnItemClickAsync(ActionInfo item)
    {
        if (!string.IsNullOrWhiteSpace(item.Url))
            App?.NavigateTo(new MenuInfo { Id = item.Id, Name = item.Name, Icon = item.Icon, Url = item.Url });
        else
            OnMenuClick?.Invoke(item.Id);
        return Task.CompletedTask;
    }

    private async Task OnFullScreenAsync()
    {
        isFullScreen = !isFullScreen;
        if (isFullScreen)
            await JS.OpenFullScreenAsync();
        else
            await JS.CloseFullScreenAsync();
    }
}